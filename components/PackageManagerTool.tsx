import React, { useState } from 'react';
import { GoogleGenAI } from '@google/genai';
import { PackageIcon, TerminalIcon } from './Icons';

interface PackageManagerToolProps {
    onGenerate: (title: string, description: string, script: string) => void;
}

type NalaAction = 'Install' | 'Remove' | 'System' | 'Show';

const popularPackages = [
    { name: 'build-essential', desc: 'Informational list of build-essential packages.' },
    { name: 'clang', desc: 'C language family frontend for LLVM.' },
    { name: 'python', desc: 'Python 3 programming language.' },
    { name: 'nodejs-lts', desc: 'Open-source, cross-platform JavaScript runtime environment.' },
    { name: 'git', desc: 'Fast, scalable, distributed revision control system.' },
    { name: 'openssh', desc: 'Secure shell client and server.' },
    { name: 'neovim', desc: 'Ambitious refactor of the Vim text editor.' },
    { name: 'proot', desc: 'Emulate chroot, mount --bind, and binfmt_misc for non-root users.' },
    { name: 'wget', desc: 'Network utility to retrieve files from the Web.' },
    { name: 'curl', desc: 'Tool to transfer data from or to a server.' },
    { name: 'unzip', desc: 'Utility to extract files from a ZIP archive.' },
    { name: 'tar', desc: 'Manipulating archive files.' },
];

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

const NalaShow: React.FC = () => {
    const [pkgName, setPkgName] = useState('nala');
    const [isLoading, setIsLoading] = useState(false);
    const [description, setDescription] = useState('');
    const [error, setError] = useState('');

    const handleShow = async () => {
        if (!pkgName) return;
        setIsLoading(true);
        setError('');
        setDescription('');
        try {
            const systemInstruction = "You are an expert on Linux packages, specifically for Debian/Ubuntu based systems like Termux. The user will provide a package name. Your task is to provide a concise, one-paragraph description of that package and its primary use case, as if you were the `nala show` or `apt show` command. Do not add any extra conversational text. Just provide the description.";
            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: `Describe the package: ${pkgName}`,
                config: { systemInstruction }
            });
            setDescription(response.text);
        } catch (err) {
            console.error(err);
            setError('Failed to fetch package description.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="space-y-4">
            <p className="text-sm text-gray-400">Enter a package name to get a brief, AI-generated description, similar to `nala show`.</p>
            <div className="flex gap-2">
                <input
                    type="text"
                    value={pkgName}
                    onChange={(e) => setPkgName(e.target.value)}
                    className="flex-grow bg-black border border-gray-600 rounded-md px-3 py-2 text-gray-200 focus:ring-2 focus:ring-green-500 focus:outline-none"
                    placeholder="e.g., nala"
                />
                <button onClick={handleShow} disabled={isLoading || !pkgName} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-600 disabled:cursor-not-allowed">
                    {isLoading ? '...' : 'Show'}
                </button>
            </div>
            {error && <p className="text-sm text-red-400">{error}</p>}
            {description && (
                <div className="bg-black border border-gray-700 p-4 rounded-md mt-4">
                    <p className="text-sm text-gray-300">{description}</p>
                </div>
            )}
        </div>
    );
};


export const PackageManagerTool: React.FC<PackageManagerToolProps> = ({ onGenerate }) => {
    const [activeTab, setActiveTab] = useState<NalaAction>('Install');
    const [selectedPackages, setSelectedPackages] = useState<string[]>(['build-essential', 'git', 'python']);
    const [customPackages, setCustomPackages] = useState('');
    const [removePackages, setRemovePackages] = useState('');
    const [usePurge, setUsePurge] = useState(false);
    
    const handleTogglePackage = (packageName: string) => {
        setSelectedPackages(prev => 
            prev.includes(packageName) 
                ? prev.filter(p => p !== packageName)
                : [...prev, packageName]
        );
    };

    const generateScript = (action: NalaAction) => {
        let script = `#!/data/data/com.termux/files/usr/bin/bash
# Nala-inspired package management script
# Generated by Termux DevUtility
set -e
`;
        let title = "Generated Package Script";
        let description = "Execute this script in Termux.";

        switch (action) {
            case 'Install':
                const allPackages = [...selectedPackages, ...customPackages.split(' ').filter(p => p)];
                if (allPackages.length === 0) return;
                script += `
echo "Updating package lists..."
pkg update -y

echo "Installing ${allPackages.length} selected package(s)..."
pkg install -y ${allPackages.join(' ')}

echo "Installation complete."
`;
                title = `Install Script (${allPackages.length} packages)`;
                description = "Executes `pkg update` and `pkg install` for the selected packages.";
                break;
            case 'Remove':
                const packagesToRemove = removePackages.split(' ').filter(p => p);
                if (packagesToRemove.length === 0) return;
                const command = usePurge ? 'pkg purge' : 'pkg uninstall';
                script += `
echo "Removing ${packagesToRemove.length} package(s)..."
${command} -y ${packagesToRemove.join(' ')}

echo "Removal complete."
`;
                title = `${usePurge ? 'Purge' : 'Remove'} Script`;
                description = `Executes \`${command}\` for the specified packages.`;
                break;

            case 'System': // A placeholder for the system buttons
                return;
        }

        onGenerate(title, description, script);
    };
    
    const generateSystemScript = (systemCommand: 'upgrade' | 'autoremove' | 'clean') => {
         let script = `#!/data/data/com.termux/files/usr/bin/bash
# Nala-inspired system management script
set -e
`;
        let title = "System Management Script";
        let description = "";

        switch(systemCommand) {
            case 'upgrade':
                script += `
echo "Updating package lists..."
pkg update -y
echo "Upgrading installed packages..."
pkg upgrade -y
echo "System upgrade complete."`;
                title = "System Update & Upgrade";
                description = "Executes `pkg update` and `pkg upgrade`."
                break;
            case 'autoremove':
                script += `
echo "Removing unused packages..."
pkg autoremove -y
echo "Autoremove complete."`;
                title = "Autoremove Unused Packages";
                description = "Executes `pkg autoremove` to clean up orphaned dependencies.";
                break;
            case 'clean':
                script += `
echo "Cleaning APT cache..."
pkg clean
echo "Cache cleaned."`;
                title = "Clean Package Cache";
                description = "Executes `pkg clean` to free up space by removing downloaded .deb files.";
                break;
        }
        onGenerate(title, description, script);
    }

    const renderContent = () => {
        switch (activeTab) {
            case 'Install':
                return (
                    <>
                        <div className="space-y-3 max-h-80 overflow-y-auto pr-2 mb-4">
                            {popularPackages.map(pkg => (
                                <div key={pkg.name} className="flex items-center bg-black p-3 rounded-md border border-gray-700">
                                    <input type="checkbox" id={`pkg-${pkg.name}`} checked={selectedPackages.includes(pkg.name)} onChange={() => handleTogglePackage(pkg.name)} className="h-5 w-5 rounded bg-gray-800 border-gray-600 text-green-500 focus:ring-green-600 cursor-pointer" />
                                    <div className="ml-4">
                                        <label htmlFor={`pkg-${pkg.name}`} className="font-bold text-green-400 cursor-pointer">{pkg.name}</label>
                                        <p className="text-xs text-gray-500">{pkg.desc}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-2">Additional Packages (space-separated)</label>
                            <input type="text" value={customPackages} onChange={(e) => setCustomPackages(e.target.value)} className="w-full bg-black border border-gray-600 rounded-md px-3 py-2 text-gray-200 focus:ring-2 focus:ring-green-500 focus:outline-none" placeholder="e.g., htop nala" />
                        </div>
                        <div className="pt-4">
                             <button onClick={() => generateScript('Install')} disabled={[...selectedPackages, ...customPackages.split(' ').filter(p => p)].length === 0} className="w-full flex items-center justify-center gap-2 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-600 disabled:cursor-not-allowed">
                                <TerminalIcon className="w-5 h-5" />
                                Generate Install Script
                            </button>
                        </div>
                    </>
                );
            case 'Remove':
                return (
                    <div className="space-y-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-2">Packages to Remove (space-separated)</label>
                            <textarea value={removePackages} onChange={(e) => setRemovePackages(e.target.value)} className="w-full h-24 bg-black border border-gray-600 rounded-md px-3 py-2 text-gray-200 focus:ring-2 focus:ring-green-500 focus:outline-none" placeholder="e.g., old-package unused-tool" />
                        </div>
                        <div className="flex items-center">
                            <input type="checkbox" id="purge" checked={usePurge} onChange={(e) => setUsePurge(e.target.checked)} className="h-5 w-5 rounded bg-gray-800 border-gray-600 text-green-500 focus:ring-green-600 cursor-pointer" />
                            <label htmlFor="purge" className="ml-2 text-sm text-gray-300">Purge packages (remove configuration files)</label>
                        </div>
                        <div className="pt-4">
                            <button onClick={() => generateScript('Remove')} disabled={removePackages.trim().length === 0} className="w-full flex items-center justify-center gap-2 bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-600 disabled:cursor-not-allowed">
                                <TerminalIcon className="w-5 h-5" />
                                Generate Remove Script
                            </button>
                        </div>
                    </div>
                );
            case 'System':
                return (
                    <div className="space-y-4">
                        <p className="text-sm text-gray-400">Generate scripts for common system maintenance tasks.</p>
                        <button onClick={() => generateSystemScript('upgrade')} className="w-full text-left bg-black p-3 rounded-md border border-gray-700 hover:border-green-500">
                            <h3 className="font-bold text-green-400">Update & Upgrade</h3>
                            <p className="text-xs text-gray-500">Updates package lists and upgrades all installed packages (`pkg update && pkg upgrade`).</p>
                        </button>
                        <button onClick={() => generateSystemScript('autoremove')} className="w-full text-left bg-black p-3 rounded-md border border-gray-700 hover:border-green-500">
                            <h3 className="font-bold text-green-400">Autoremove Unused Packages</h3>
                            <p className="text-xs text-gray-500">Removes packages that were automatically installed to satisfy dependencies but are no longer needed (`pkg autoremove`).</p>
                        </button>
                        <button onClick={() => generateSystemScript('clean')} className="w-full text-left bg-black p-3 rounded-md border border-gray-700 hover:border-green-500">
                             <h3 className="font-bold text-green-400">Clean Cache</h3>
                            <p className="text-xs text-gray-500">Clears out the local repository of downloaded package files (`pkg clean`).</p>
                        </button>
                    </div>
                );
             case 'Show':
                return <NalaShow />;
        }
    };

    return (
        <div className="bg-[#111111] border border-gray-800 rounded-lg p-6 shadow-lg shadow-black/30">
            <div className="flex items-center gap-4 mb-4 border-b border-gray-700 pb-3">
                 <PackageIcon className="w-8 h-8 text-green-300" />
                 <h2 className="text-2xl font-bold text-green-300">Package Manager Utility</h2>
            </div>
            <p className="text-sm text-gray-400 mb-6">A `nala`-inspired interface for managing your Termux packages. Select an action to generate a clean, reliable script.</p>
            
            <div className="flex border-b border-gray-700 mb-6">
                {(['Install', 'Remove', 'System', 'Show'] as NalaAction[]).map(tab => (
                    <button
                        key={tab}
                        onClick={() => setActiveTab(tab)}
                        className={`px-4 py-2 text-sm font-medium transition-colors ${
                            activeTab === tab 
                                ? 'border-b-2 border-green-400 text-green-300' 
                                : 'text-gray-400 hover:text-white'
                        }`}
                    >
                        {tab}
                    </button>
                ))}
            </div>
            
            <div>
                {renderContent()}
            </div>
        </div>
    );
};