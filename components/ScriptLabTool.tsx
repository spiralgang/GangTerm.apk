import React, { useState } from 'react';
import { GoogleGenAI } from '@google/genai';
import { TerminalIcon } from './Icons';

interface ScriptLabToolProps {
    onGenerate: (title: string, description: string, script: string) => void;
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

const agenticBlueprints = [
    {
        name: 'Secure Encrypted Backup',
        prompt: `Create a bash script for Termux that finds important project files (like READMEs, source code in src/, scripts/), archives them into a .tar.gz file, encrypts the archive with a user-provided password using openssl, and then optionally uploads it to a specified rclone remote. The script should include robust logging, error handling, and cleanup of temporary files.`,
        desc: 'Generate a script to archive, encrypt, and upload sensitive files.'
    },
    {
        name: 'Python AI Provider Router',
        prompt: `Generate a Python script that acts as a unified function to call different AI provider APIs (like OpenAI, Hugging Face, Ollama). The script should select the provider based on an environment variable or function argument. It must handle API keys from environment variables securely and normalize the responses to return a simple text string. Include error handling for network issues or missing API keys.`,
        desc: 'A flexible Python function to route requests to multiple AI backends.'
    },
    {
        name: 'Zarr Compressed Storage',
        prompt: `Generate a Python script for a Termux environment that demonstrates how to use the Zarr library to create and manage a large, compressed, chunked array on disk. This is a user-land alternative to ZRAM for low-memory devices. The script should use the Blosc compressor, create a sample Zarr array, write some random data to it, read a chunk back, and report the on-disk size to show the effect of compression.`,
        desc: 'A user-land ZRAM alternative for compressed memory on mobile.'
    }
];


export const ScriptLabTool: React.FC<ScriptLabToolProps> = ({ onGenerate }) => {
    const [prompt, setPrompt] = useState('Create a script to backup my Termux home directory to /sdcard/termux-backup');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);
        setError('');

        try {
            const systemInstruction = "You are an expert in shell scripting and the Termux environment on Android. You are an agentic coder. Generate concise, efficient, and secure bash or python scripts to accomplish the user's goal. Explain the script with comments where necessary. The script must be fully functional and production-grade, running within the Termux environment. For bash scripts, start with #!/data/data/com.termux/files/usr/bin/bash.";
            
            const fullPrompt = `${prompt}`;

            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: fullPrompt,
                config: {
                    systemInstruction: systemInstruction,
                }
            });
            
            // Basic cleanup to remove markdown code fences if the model adds them
            let script = response.text.trim();
            if (script.startsWith('```bash')) {
                script = script.substring(7);
                script = script.replace(/```$/, '');
            } else if (script.startsWith('```python')) {
                script = script.substring(9);
                script = script.replace(/```$/, '');
            }


            onGenerate(
                "AI-Generated Agentic Script",
                "This script was generated by the Script Lab AI. Review it for safety and correctness before executing.",
                script.trim()
            );

        } catch (err) {
            console.error(err);
            setError('Failed to generate script. Please check the console for details.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
         <div className="bg-[#111111] border border-gray-800 rounded-lg p-6 shadow-lg shadow-black/30">
            <h2 className="text-2xl font-bold text-green-300 mb-4 border-b border-gray-700 pb-3">AI Script Lab</h2>
            <p className="text-sm text-gray-400 mb-6">Describe a task or select an Agentic Blueprint. The AI will generate a production-grade script to accomplish your goal.</p>
            
            <div className="mb-6">
                <h3 className="text-lg font-semibold text-green-400 mb-3">Agentic Blueprints</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    {agenticBlueprints.map((bp) => (
                        <button key={bp.name} onClick={() => setPrompt(bp.prompt)} className="text-left bg-black p-3 rounded-md border border-gray-700 hover:border-green-500 transition-colors">
                            <h4 className="font-bold text-sm text-gray-200">{bp.name}</h4>
                            <p className="text-xs text-gray-500 mt-1">{bp.desc}</p>
                        </button>
                    ))}
                </div>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                    <label htmlFor="ai-prompt" className="block text-sm font-medium text-gray-400 mb-2">
                        Your Goal / Custom Prompt
                    </label>
                    <textarea
                        id="ai-prompt"
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                        className="w-full bg-black border border-gray-600 rounded-md px-3 py-2 text-gray-200 focus:ring-2 focus:ring-green-500 focus:outline-none h-32"
                        placeholder="e.g., Create a script that organizes my Downloads folder by file type..."
                        required
                    />
                </div>
                
                {error && <p className="text-sm text-red-400">{error}</p>}

                <div className="pt-4">
                    <button
                        type="submit"
                        disabled={isLoading}
                        className="w-full flex items-center justify-center gap-2 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-600 disabled:cursor-not-allowed"
                    >
                        {isLoading ? (
                            <>
                                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Weaving Code...
                            </>
                        ) : (
                            <>
                                <TerminalIcon className="w-5 h-5" />
                                Generate Agentic Script
                            </>
                        )}
                    </button>
                </div>
            </form>
        </div>
    );
};