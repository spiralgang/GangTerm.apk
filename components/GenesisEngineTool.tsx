import React, { useState } from 'react';
import { Share2Icon, TerminalIcon, TrashIcon, UserIcon } from './Icons';
import { Tooltip } from './Tooltip';
import { useApp } from '../context/AppContext';

interface GenesisEngineToolProps {
    onGenerate: (title: string, description: string, script: string) => void;
}

interface Agent {
    id: number;
    role: string;
}

export const GenesisEngineTool: React.FC<GenesisEngineToolProps> = ({ onGenerate }) => {
    const { addGuardianLogEntry } = useApp();

    const [systemGoal, setSystemGoal] = useState('Analyze a pull request for a quantum machine learning model, checking for correctness, style, and security vulnerabilities.');
    const [agents, setAgents] = useState<Agent[]>([
        { id: 1, role: 'Security Agent: Analyze classical preprocessing for data sanitization vulnerabilities.' },
        { id: 2, role: 'Quantum Agent: Validate VQC ansatz and hardware constraints for the target device.' },
        { id: 3, role: 'Classical Agent: Check Python code for style, complexity, and test coverage.' },
    ]);
    
    const addAgent = () => {
        setAgents([...agents, { id: Date.now(), role: '' }]);
    };
    
    const removeAgent = (id: number) => {
        setAgents(agents.filter(agent => agent.id !== id));
    };

    const updateAgentRole = (id: number, role: string) => {
        setAgents(agents.map(agent => agent.id === id ? { ...agent, role } : agent));
    };

    const generateSimulationScript = () => {
        const agentFunctions = agents.map((agent, index) => {
            const functionName = `agent_${index + 1}_task`;
            return `
async def ${functionName}(system_goal, collaboration_log):
    """Agent ${index + 1}: Simulates the task based on its role."""
    role = """${agent.role.replace(/"/g, '\\"')}"""
    print(f"[AGENT ${index + 1}] ACTIVATED. Role: {role.strip()}", flush=True)
    await asyncio.sleep(random.uniform(1, 3)) # Simulate work
    
    finding = f"Based on the goal '{system_goal[:30]}...', I analyzed my area of responsibility. My finding is: [Simulated finding for role: {role.strip()}]"
    
    print(f"[AGENT ${index + 1}] REPORTING: {finding}", flush=True)
    collaboration_log.append({
        "agent": f"Agent ${index + 1}",
        "role": role.strip(),
        "finding": finding,
        "timestamp": datetime.utcnow().isoformat()
    })
    return finding
`;
        }).join('');

        const agentTasks = agents.map((_, index) => `agent_${index + 1}_task(SYSTEM_GOAL, collaboration_log)`).join(',\n        ');

        const script = `#!/usr/bin/env python3
import asyncio
import random
import json
from datetime import datetime

# --- SYSTEM DEFINITION ---
# This script was auto-generated by the GangTerm Genesis Engine.
# It simulates a multi-agent system designed to achieve a specific goal.

SYSTEM_GOAL = """
${systemGoal}
"""

# --- AGENT SIMULATION LOGIC ---
${agentFunctions}

# --- MAIN ORCHESTRATOR ---
async def main():
    """Orchestrates the agentic workflow."""
    start_time = datetime.utcnow()
    print("--- GENESIS ENGINE: AGENTIC SIMULATION START ---")
    print(f"System Goal: {SYSTEM_GOAL.strip()}")
    print("-------------------------------------------------")
    
    collaboration_log = []
    
    # Run all agent tasks concurrently
    tasks = [
        ${agentTasks}
    ]
    
    results = await asyncio.gather(*tasks)
    
    end_time = datetime.utcnow()
    duration = (end_time - start_time).total_seconds()
    
    print("-------------------------------------------------")
    print("--- SIMULATION COMPLETE ---")
    print(f"Duration: {duration:.2f} seconds")
    print("\\n--- COLLABORATION SUMMARY ---")
    
    summary = {
        "system_goal": SYSTEM_GOAL.strip(),
        "start_time": start_time.isoformat(),
        "end_time": end_time.isoformat(),
        "duration_seconds": duration,
        "collaboration_log": collaboration_log
    }
    
    # Print a formatted JSON summary
    print(json.dumps(summary, indent=2))
    print("--- END OF REPORT ---")

if __name__ == "__main__":
    asyncio.run(main())
`;

        onGenerate(
            "Agentic System Simulation Script",
            "This Python script simulates the multi-agent system you designed. It uses asyncio to run agent tasks concurrently and produces a final JSON report.",
            script
        );
        addGuardianLogEntry('Genesis Script Generated', `Generated simulation for goal: "${systemGoal.substring(0, 30)}..."`);
    };

    return (
        <div className="bg-[#0d1117] border border-gray-800 rounded-lg p-4 shadow-lg shadow-black/30 space-y-6">
            <div>
                <div className="flex items-center gap-3 mb-2">
                    <Share2Icon className="w-7 h-7 text-green-300" />
                    <h2 className="text-xl font-bold text-green-300">Genesis Engine</h2>
                </div>
                <p className="text-sm text-gray-400">Design an agentic system by defining its overall goal and the specialized roles of each agent. The engine will generate a Python simulation script.</p>
            </div>
            
            <div className="p-4 bg-[#010409] border border-gray-800 rounded-lg space-y-4">
                <h3 className="text-lg font-semibold text-green-400">System Design</h3>
                <div>
                    <Tooltip text="Describe the high-level objective for your multi-agent system. What problem are they collaborating to solve?">
                        <label className="block text-sm font-medium text-gray-400 mb-2 cursor-help">System Goal</label>
                    </Tooltip>
                    <textarea
                        value={systemGoal}
                        onChange={(e) => setSystemGoal(e.target.value)}
                        className="w-full h-24 bg-[#0d1117] border border-gray-700 rounded-md px-3 py-1.5 text-gray-200 focus:ring-2 focus:ring-green-500 focus:outline-none font-fira text-sm"
                        placeholder="e.g., Deploy a containerized RESTful API to a Kubernetes cluster and set up continuous monitoring."
                    />
                </div>
                
                <div>
                    <label className="block text-sm font-medium text-gray-400 mb-2">Collaborating Agents ({agents.length})</label>
                    <div className="space-y-2">
                        {agents.map((agent, index) => (
                            <div key={agent.id} className="flex items-center gap-2">
                                 <UserIcon className="w-5 h-5 text-gray-500 flex-shrink-0" />
                                <input
                                    type="text"
                                    value={agent.role}
                                    onChange={(e) => updateAgentRole(agent.id, e.target.value)}
                                    className="w-full bg-[#0d1117] border border-gray-700 rounded-md px-3 py-1.5 text-gray-200 focus:ring-2 focus:ring-green-500 focus:outline-none font-fira text-sm"
                                    placeholder={`Agent ${index + 1} Role/Specialization`}
                                />
                                <Tooltip text="Remove this agent">
                                    <button
                                        onClick={() => removeAgent(agent.id)}
                                        disabled={agents.length <= 1}
                                        className="text-red-500 hover:text-red-400 disabled:text-gray-600 disabled:cursor-not-allowed"
                                    >
                                        <TrashIcon className="w-5 h-5" />
                                    </button>
                                </Tooltip>
                            </div>
                        ))}
                    </div>
                    <button
                        onClick={addAgent}
                        className="mt-3 text-xs bg-gray-700 hover:bg-gray-600 px-3 py-1.5 rounded-md text-gray-300"
                    >
                        + Add Agent
                    </button>
                </div>
            </div>

            <div className="pt-2">
                <Tooltip text="Generate the Python simulation script based on the system design above.">
                     <span className="block">
                        <button
                            onClick={generateSimulationScript}
                            disabled={!systemGoal.trim() || agents.some(a => !a.role.trim())}
                            className="w-full flex items-center justify-center gap-2 bg-green-600 hover:bg-green-700 text-white font-bold py-2.5 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-700 disabled:cursor-not-allowed"
                        >
                            <TerminalIcon className="w-5 h-5" />
                            Generate Simulation Script
                        </button>
                    </span>
                </Tooltip>
            </div>
        </div>
    );
};
