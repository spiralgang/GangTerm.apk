{
  "name": "Gang Term.apk",
  "description": "!/data/data/com.termux/files/usr/bin/bash\n\n\n\nSpiralgang APK Fusion Script - Production Grade\n\nThis script will decompile, mutate, recompile, sign, and install a parallel Termux instance.\n\nIt features a full forensic audit trail and robust error handling.\n\n\nset -Eeuo pipefail # Exit on error, unset var, pipe failure.\n\n--- CONFIGURATION ---\nSOURCE_APK=\"/storage/emulated/0/Download/termux-0-22.apk\"\nNEWPACKAGENAME=\"com.spiralgang.term\"\nNEWAPPNAME=\"Gang Term\"\nVERSIONCODEOVERRIDE=\"\"\nVERSIONNAMEOVERRIDE=\"\"\nWORKDIR=\"/data/data/com.termux/files/home/apkfusionworkdir\"\nKEYSTORENAME=\"fusionkeystore.jks\"\nKEYALIAS=\"fusionkey\"\nKEY_PASS=\"spiralgang\" # Use a secure password in a real scenario\nLOGFILE=\"${WORKDIR}/fusionaudit.log\"\nCLEANUPONFAILURE=\"false\" # Set to \"true\" to automatically clean up on error\n\n--- FUNCTIONS ---\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"${LOG_FILE}\"\n}\n\nFunction to execute a command with full logging of stdout and stderr\nlogandrun() {\n    local cmd=\"$@\"\n    log \"EXECUTING: $cmd\"\n    \n    if eval \"$cmd\" >> \"${LOG_FILE}\" 2>&1; then\n        log \"SUCCESS: Command finished successfully.\"\n    else\n        local exit_code=$?\n        log \"FATAL: Command failed with exit code ${exit_code}. Check the audit log for details.\"\n        log \"AUDIT LOG: ${LOG_FILE}\"\n        # Setting CLEANUPONFAILURE to false is useful for debugging\n        if [ \"${CLEANUPONFAILURE}\" = \"true\" ]; then\n             log \"Cleaning up failed workspace.\"\n             rm -rf \"${WORKDIR}\"\n        else\n             log \"Workspace preserved for inspection at: ${WORKDIR}\"\n        fi\n        exit ${exit_code}\n    fi\n}\n\ncleanup() {\n  if [ $? -ne 0 ]; then\n    log \"An error occurred. The script is terminating.\"\n    if [ \"${CLEANUPONFAILURE}\" != \"true\" ]; then\n      log \"The workspace at ${WORKDIR} has been left for inspection.\"\n    fi\n  fi\n}\ntrap cleanup EXIT ERR\n\n--- MAIN EXECUTION ---\necho \"--- Initiating Spiralgang APK Fusion Process ---\"\necho \"Full audit trail will be available at ${LOG_FILE}\"\n\nrm -rf \"${WORKDIR}\"\nmkdir -p \"${WORKDIR}\"\ntouch \"${LOG_FILE}\"\nlog \"Workspace created at ${WORKDIR}\"\n\ncd \"${WORKDIR}\"\n\nlog \"[1/9] Validating inputs and environment...\"\nif [ ! -f \"${SOURCE_APK}\" ]; then\n    log \"ERROR: Source APK not found at '${SOURCE_APK}'\"\n    exit 1\nfi\nif [ -z \"${NEWPACKAGENAME}\" ] || [ -z \"${NEWAPPNAME}\" ]; then\n    log \"ERROR: New Package Name and New App Name cannot be empty.\"\n    exit 1\nfi\nSOURCEAPKHASH=$(sha256sum \"${SOURCE_APK}\" | awk '{print $1}')\nlog \"Source APK hash (SHA256): ${SOURCEAPKHASH}\"\n\nlog \"Installing required tools (apktool, apksigner, zipalign)...\"\npkg install -y apktool apksigner zipalign >> \"${LOG_FILE}\" 2>&1\n\nDECOMPILED_DIR=\"${WORKDIR}/decompiled\"\nMANIFESTFILE=\"${DECOMPILEDDIR}/AndroidManifest.xml\"\nSTRINGSFILE=\"${DECOMPILEDDIR}/res/values/strings.xml\"\n\nlog \"[2/9] Decompiling source APK...\"\nlogandrun apktool d \"${SOURCE_APK}\" -o decompiled\n\nlog \"[3/9] Mutating AndroidManifest.xml and resource files...\"\nORIGINALPACKAGENAME=$(grep -oP 'package=\"[^\"]+\"' \"${MANIFEST_FILE}\" | sed 's/package=\"//;s/\"//')\nlog \"Original package name detected: ${ORIGINALPACKAGENAME}\"\n\nlog \"Changing package name to ${NEWPACKAGENAME}...\"\nlogandrun find \"${DECOMPILEDDIR}\" -type f \\( -name \".xml\" -o -name \".smali\" \\) -print0 | xargs -0 sed -i \"s/${ORIGINALPACKAGENAME}/${NEWPACKAGE_NAME}/g\"\n\nlog \"Changing app name to '${NEWAPPNAME}'...\"\nif grep -q 'name=\"appname\"' \"${STRINGSFILE}\"; then\n    logandrun sed -i \"s|>Termux<|>${NEWAPPNAME}<|g\" \"${STRINGS_FILE}\"\nelse\n    log \"WARNING: 'app_name' string resource not found. App name may not change.\"\nfi\n\nif [ -n \"${VERSIONCODEOVERRIDE}\" ]; then\n    log \"Overriding versionCode to '${VERSIONCODEOVERRIDE}'...\"\n    logandrun sed -i \"s/versionCode=\"[^\"]*\"/versionCode=\"${VERSIONCODEOVERRIDE}\"/\" \"${MANIFEST_FILE}\"\nfi\nif [ -n \"${VERSIONNAMEOVERRIDE}\" ]; then\n    log \"Overriding versionName to '${VERSIONNAMEOVERRIDE}'...\"\n    logandrun sed -i \"s/versionName=\"[^\"]*\"/versionName=\"${VERSIONNAMEOVERRIDE}\"/\" \"${MANIFEST_FILE}\"\nfi\nlog \"Mutation complete.\"\n\nlog \"[4/9] Recompiling the mutated application...\"\nlogandrun apktool b decompiled -o unsigned.apk\n\nlog \"[5/9] Generating new signing key...\"\nlogandrun keytool -genkey -v -keystore \"${KEYSTORENAME}\" -alias \"${KEYALIAS}\" -keyalg RSA -keysize 2048 -validity 10000 -storepass \"${KEYPASS}\" -keypass \"${KEYPASS}\" -dname \"CN=Spiralgang, OU=Termux, O=GhostShell, L=Unknown, ST=Unknown, C=XX\"\n\nlog \"[6/9] Signing the recompiled APK...\"\nlogandrun apksigner sign --ks \"${KEYSTORENAME}\" --ks-key-alias \"${KEYALIAS}\" --ks-pass \"pass:${KEY_PASS}\" --out signed.apk unsigned.apk\n\nlog \"[7/9] Aligning the final APK...\"\nFINALAPKNAME=\"${NEWAPPNAME// /_}.apk\"\nlogandrun zipalign -v 4 signed.apk \"${FINALAPKNAME}\"\n\nFINALAPKPATH=\"${WORKDIR}/${FINALAPKNAME}\"\nlog \"Final APK created at ${FINALAPKPATH}\"\n\nlog \"[8/9] Generating Final Audit Report...\"\nFINALAPKHASH=$(sha256sum \"${FINALAPKPATH}\" | awk '{print $1}')\ncat > fusion_summary.txt <<- EOM\nSpiralgang APK Fusion Summary\n------------------------------------\nTimestamp: $(date)\nSource APK: ${SOURCE_APK}\nSource SHA256: ${SOURCEAPKHASH}\n\nFinal APK: ${FINALAPKPATH}\nFinal SHA256: ${FINALAPKHASH}\n\nMutations Applied:\n- New Package Name: ${NEWPACKAGENAME}\n- New App Name: ${NEWAPPNAME}\n- Version Code Override: ${VERSIONCODEOVERRIDE:-N/A}\n- Version Name Override: ${VERSIONNAMEOVERRIDE:-N/A}\n\nFull forensic log available at: ${LOG_FILE}\nEOM\nlog \"Summary written to ${WORKDIR}/fusion_summary.txt\"\ncat fusion_summary.txt\n\nlog \"[9/9] Attempting to install the new APK...\"\nif pm install \"${FINALAPKPATH}\"; then\n    log \"SUCCESS: '${NEWAPPNAME}' installed successfully.\"\n    log \"You can now run your parallel Termux instance.\"\nelse\n    log \"ERROR: Installation failed. You may need to manually uninstall an existing version or install the APK from your file manager.\"\n    log \"You can find the final APK at: ${FINALAPKPATH}\"\nfi\n\nlog \"--- Fusion Process Complete ---\"\n\nAn AI-powered 'superlab' for Android. Features an agentic script lab with production-grade blueprints, a Nala-inspired package manager for robust environment control, and an APK fusion tool for creating parallel Termux runtimes with forensic precision.",
  "requestFramePermissions": []
}